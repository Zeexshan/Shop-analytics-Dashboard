# Shop Analytics Desktop App - GitHub Actions Authentication Fix

## PROBLEM SUMMARY
The Shop Analytics Dashboard works perfectly in Replit development environment but **authentication completely fails** when built via GitHub Actions and distributed as desktop app. Users cannot login with `admin` / `ShopOwner@2024` credentials.

## ROOT CAUSE
- Environment variables from Replit secrets are not available in GitHub Actions builds
- Authentication system relies on environment variables that don't exist in production builds
- Electron packaging doesn't properly handle environment variable fallbacks

## COMPLETE FIX INSTRUCTIONS

### STEP 1: Fix Backend Authentication Logic (`server/routes.ts`)

Replace the existing login route with this **production-ready authentication system**:

```typescript
// Add these constants at the top of server/routes.ts
const PRODUCTION_DEFAULTS = {
  ADMIN_USERNAME: 'admin',
  ADMIN_PASSWORD: 'ShopOwner@2024',
  // Pre-computed bcrypt hash for 'ShopOwner@2024' (rounds=10)
  ADMIN_PASSWORD_HASH: '$2b$10$8K1p2GdniBqROf1O2od2WeP8o1HZGEY8/fTjy0vRVeUcugDh6VT3.',
  ADMIN_RESET_CODE: 'SHOP2024RESET',
  JWT_SECRET: 'zeeexshan_shop_analytics_jwt_secret_2024_secure_token_key',
  LICENSE_HASH_SALT: 'l1c3ns3_h4sh_s4lt_2024_zeeexshan_analytics',
  DEVICE_HASH_SALT: 'dev1c3_h4sh_s4lt_2024_zeeexshan_secure'
};

function getSecureConfig() {
  return {
    ADMIN_USERNAME: process.env.ADMIN_USERNAME || PRODUCTION_DEFAULTS.ADMIN_USERNAME,
    ADMIN_PASSWORD_HASH: process.env.ADMIN_PASSWORD_HASH || PRODUCTION_DEFAULTS.ADMIN_PASSWORD_HASH,
    ADMIN_RESET_CODE: process.env.ADMIN_RESET_CODE || PRODUCTION_DEFAULTS.ADMIN_RESET_CODE,
    JWT_SECRET: process.env.JWT_SECRET || PRODUCTION_DEFAULTS.JWT_SECRET,
    LICENSE_HASH_SALT: process.env.LICENSE_HASH_SALT || PRODUCTION_DEFAULTS.LICENSE_HASH_SALT,
    DEVICE_HASH_SALT: process.env.DEVICE_HASH_SALT || PRODUCTION_DEFAULTS.DEVICE_HASH_SALT,
    GUMROAD_PRODUCT_ID: process.env.GUMROAD_PRODUCT_ID || 'ihpuq'
  };
}
```

**REPLACE the entire `/api/auth/login` route** with this enhanced version that includes proper logging and fallbacks:

```typescript
app.post('/api/auth/login', async (req, res, next) => {
  try {
    console.log('Login attempt:', { 
      username: req.body.username, 
      hasPassword: !!req.body.password,
      nodeEnv: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    });

    const { username, password } = req.body;
    const config = getSecureConfig();

    if (!username || !password) {
      console.log('Login failed: Missing credentials');
      return res.status(400).json({ message: 'Username and password required', success: false });
    }

    if (username !== config.ADMIN_USERNAME) {
      console.log('Login failed: Invalid username');
      return res.status(401).json({ message: 'Invalid credentials', success: false });
    }

    const isValidPassword = await bcrypt.compare(password, config.ADMIN_PASSWORD_HASH);
    console.log('Password validation:', { isValid: isValidPassword });

    if (!isValidPassword) {
      console.log('Login failed: Invalid password');
      return res.status(401).json({ message: 'Invalid credentials', success: false });
    }

    const token = jwt.sign(
      { username: config.ADMIN_USERNAME, role: 'admin', author: 'zeeexshan' },
      config.JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('Login successful');
    res.json({ success: true, message: 'Login successful', token, user: { username: config.ADMIN_USERNAME, role: 'admin' } });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: 'Authentication system error', success: false });
  }
});
```

**ADD these debugging endpoints** (temporarily for testing):

```typescript
app.get('/api/health', (req, res) => {
  const config = getSecureConfig();
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'production',
    hasAdminHash: !!config.ADMIN_PASSWORD_HASH,
    hasJwtSecret: !!config.JWT_SECRET,
    author: 'zeeexshan'
  });
});

app.get('/api/test-credentials', async (req, res) => {
  const config = getSecureConfig();
  const testPassword = 'ShopOwner@2024';
  const isValid = await bcrypt.compare(testPassword, config.ADMIN_PASSWORD_HASH);
  
  res.json({
    testPassword,
    storedHash: config.ADMIN_PASSWORD_HASH,
    isValid,
    username: config.ADMIN_USERNAME,
    environment: process.env.NODE_ENV
  });
});
```

### STEP 2: Update GitHub Actions Workflow

**Create/update `.github/workflows/build-desktop.yml`** with proper environment variable handling:

```yaml
name: Build Desktop App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci

    - name: Build with environment variables
      env:
        NODE_ENV: production
        ADMIN_USERNAME: admin
        ADMIN_PASSWORD_HASH: $2b$10$8K1p2GdniBqROf1O2od2WeP8o1HZGEY8/fTjy0vRVeUcugDh6VT3.
        ADMIN_RESET_CODE: SHOP2024RESET
        JWT_SECRET: zeeexshan_shop_analytics_jwt_secret_2024_secure_token_key
        LICENSE_HASH_SALT: l1c3ns3_h4sh_s4lt_2024_zeeexshan_analytics
        DEVICE_HASH_SALT: dev1c3_h4sh_s4lt_2024_zeeexshan_secure
        GUMROAD_PRODUCT_ID: ihpuq
      run: |
        cd client && npm run build
        cd ../server && npm run build
        npm run build:desktop:windows

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist/*.exe
```

### STEP 3: Fix Electron Main Process

**Update `electron/main.js`** to properly load environment variables:

```javascript
// Add this function at the top of electron/main.js
function loadEnvironmentVariables() {
  // Set production defaults if not already set
  const defaults = {
    NODE_ENV: 'production',
    ADMIN_USERNAME: 'admin',
    ADMIN_PASSWORD_HASH: '$2b$10$8K1p2GdniBqROf1O2od2WeP8o1HZGEY8/fTjy0vRVeUcugDh6VT3.',
    JWT_SECRET: 'zeeexshan_shop_analytics_jwt_secret_2024_secure_token_key',
    GUMROAD_PRODUCT_ID: 'ihpuq'
  };

  Object.keys(defaults).forEach(key => {
    if (!process.env[key]) {
      process.env[key] = defaults[key];
    }
  });

  console.log('Environment loaded:', {
    NODE_ENV: process.env.NODE_ENV,
    hasAdminHash: !!process.env.ADMIN_PASSWORD_HASH,
    hasJwtSecret: !!process.env.JWT_SECRET
  });
}

// Call this BEFORE app.whenReady()
loadEnvironmentVariables();
```

**Update the server startup** in `electron/main.js`:

```javascript
function startServer() {
  return new Promise((resolve, reject) => {
    const serverPath = path.join(__dirname, '..', 'server', 'dist', 'index.js');
    
    serverProcess = spawn('node', [serverPath], {
      env: { 
        ...process.env,  // This now includes our defaults
        PORT: '5000',
        NODE_ENV: 'production'
      },
      stdio: ['pipe', 'pipe', 'pipe']
    });

    // Add logging
    serverProcess.stdout.on('data', (data) => console.log('Server:', data.toString()));
    serverProcess.stderr.on('data', (data) => console.error('Server Error:', data.toString()));
    
    setTimeout(resolve, 3000); // Give server time to start
  });
}
```

### STEP 4: Test the Fix

1. **Test in Replit first**:
   - Navigate to `/api/health` - should show `hasAdminHash: true`
   - Navigate to `/api/test-credentials` - should show `isValid: true`
   - Test login with `admin` / `ShopOwner@2024`

2. **Test GitHub Actions build**:
   - Commit changes and push to trigger build
   - Download the built `.exe` file
   - Run the desktop app and test login

3. **If login still fails in desktop app**:
   - Check if Express server is starting (look for console logs)
   - Test if `http://localhost:5000/api/health` is accessible
   - Verify environment variables are loaded

### STEP 5: Clean Up (After Testing)

Once authentication works, **remove the debug endpoints**:
- Remove `/api/test-credentials` route
- Keep `/api/health` for monitoring

## EXPECTED RESULTS

After implementing these fixes:

✅ **Development (Replit)**: Login works as before  
✅ **GitHub Actions Build**: Creates working desktop app  
✅ **Desktop App**: Users can login with `admin` / `ShopOwner@2024`  
✅ **Production Ready**: No dependency on external environment variables  

## WHY THIS WORKS

1. **Hardcoded Fallbacks**: Production defaults are embedded in the code
2. **Pre-computed Hash**: No runtime bcrypt.hash() calls that might fail
3. **Environment Variable Priority**: Uses Replit secrets if available, falls back to defaults
4. **Proper Logging**: Debug info to identify issues quickly
5. **Cross-Platform**: Works in development, GitHub Actions, and Electron desktop

## WATERMARK PRESERVATION

All fixes maintain the "zeeexshan" watermarks throughout the codebase as required for your commercial application.

---

**IMPLEMENTATION ORDER**: Follow steps 1-2-3-4-5 in sequence. Test after each step to ensure everything works before proceeding.